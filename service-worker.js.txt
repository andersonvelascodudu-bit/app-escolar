// service-worker.js

const CACHE_NAME = 'nata-escolar-cache-v2'; // Incrementa versão para forçar atualização
// Usa caminhos relativos para maior compatibilidade com subdiretórios (GitHub Pages)
const urlsToCache = [
  './', // Cacheia a raiz (pode ajudar com o start_url)
  './Sistema%20Escolar%20NATA.html',
  './manifest.json', // Cacheia o manifest
  './icons/icon-192x192.png',
  './icons/icon-512x512.png',
  './icons/apple-touch-icon.png' // Cacheia o ícone da Apple também
];

self.addEventListener('install', event => {
  console.log('SW: Instalando v2...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('SW: Cache aberto, adicionando URLs da casca:', urlsToCache);
        return cache.addAll(urlsToCache); 
      })
      .then(() => {
        console.log('SW: Casca da aplicação em cache com sucesso');
        self.skipWaiting(); 
      })
      .catch(error => {
        console.error('SW: Falha ao adicionar ao cache durante a instalação:', error);
      })
  );
});

self.addEventListener('activate', event => {
  console.log('SW: Ativando v2...');
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('SW: Limpando cache antigo:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => self.clients.claim()) 
  );
});

self.addEventListener('fetch', event => {
  // Ignora pedidos não-GET e pedidos para extensões do Chrome (comuns em dev tools)
  if (event.request.method !== 'GET' || event.request.url.startsWith('chrome-extension://')) {
    return;
  }

  // Estratégia: Cache first, fallback to network para os recursos da casca
  // Tenta responder do cache. Se não encontrar, busca na rede.
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Encontrado no cache OU falhou (response é null), busca na rede
        // console.log(response ? 'SW: Servindo do cache:' : 'SW: Não encontrado no cache, buscando na rede:', event.request.url);
        return response || fetch(event.request).then(networkResponse => {
            // Opcional: Poderia clonar e guardar em cache aqui
            return networkResponse;
        }).catch(error => {
             console.error('SW: Falha ao buscar na rede:', event.request.url, error);
             // Retorna uma resposta offline básica se a busca na rede falhar
             // (Isto pode não ser ideal se a falha for para a API do Firebase)
             // Considerar retornar 'undefined' para deixar o navegador lidar?
             // Se for um pedido de navegação (HTML), retorna uma página offline simples
             if (event.request.mode === 'navigate') {
                 // Tenta servir o HTML principal do cache como fallback final
                 return caches.match('./Sistema%20Escolar%20NATA.html'); 
             }
             // Para outros recursos (imagens, etc.), apenas falha
        });
      })
  );
});